Runnable和Thread比较
1、 Runnable更容易实现资源共享，能多个线程同时处理一个资源。

//使用Thread实现售票功能
public static void main(String[] args) {
		new MyThread().start();
        new MyThread().start();
}

class MyThread extends Thread{
    private int ticket = 5;
    public void run(){
         while(true){
             System.out.println("Thread ticket = " + ticket--);
             if(ticket < 0){
                break;
             }
         }
    }
}
注：根据输出结果，会发现多卖了一半的票，显然不合理。

//使用Runnable实现售票功能
public static void main(String[] args) {
    MyThread2 m=new MyThread2();
    new Thread(m).start();
    new Thread(m).start();
}

class MyThread2 implements Runnable{
    private int ticket = 5;
    public void run(){
        while(true){
            System.out.println("Runnable ticket = " + ticket--);
            if(ticket < 0){
                break;
            }
        }
    }
}

注：很明显，其输出结果不会出现多售出车票。

上述的区别主要在于：

new MyThread().start();
new MyThread().start();

new Thread(m).start();
new Thread(m).start();

Thread实现售票功能的时候，创建了两个对象；而Runnable实现售票功能的时候，使用的是同一个Runnable对象。

总结
1、Runnable和Thread相比优点有：
1
（1）由于Java不允许多继承，因此实现了Runnable接口可以再继承其他类，但是Thread明显不可以；
（2）Runnable可以实现多个相同的程序代码的线程去共享同一个资源，而Thread并不是不可以，而是相比于Runnable来说，不太适合。

2、Runnable为什么不可以直接run
1
Runnable相当于一个Task，并不具有线程的概念，如果你直接去调用Runnable的run，其实就是相当于直接在主线程中执行了一个函数而已，
并未开启线程去执行。所以显而易见，如果你在代码中直接通过这种方式run了一个runnable，明显您的程序的主线程就直接悲催了，
各种资源不足现象的崩溃日志会接踵而至，而且遇到这种问题的时候，如果没有一定的研发经验和坚持，很有可能采取错误的解决策略。