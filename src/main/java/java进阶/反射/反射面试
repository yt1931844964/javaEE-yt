1、什么时候用反射创建对象
通常情况下，我们会使用new关键字来创建对象。但是在一些特定的场景下，例如我们需要根据用户输入的类名来动态地创建对象，或者需要在程序运行期间动态地生成对象实例等情况下，
就可以使用反射机制来创建对象。

具体来说，当需要动态地创建一个对象实例，并在程序运行期间调用该对象的方法和变量时，可以使用反射机制来创建对象。
例如在某些框架中，我们需要根据配置文件或者注解来动态地创建对象，并使用该对象来执行业务逻辑。

需要注意的是，由于使用反射机制创建对象比直接使用new关键字创建对象更加复杂和耗时，因此在一般情况下，应尽量避免过度使用反射机制。


2、反射是否破坏了对象的封装性
反射机制在一定程度上破坏了对象的封装性。通过反射，我们可以访问和修改对象的私有属性和方法，这些属性和方法本来是不应该对外暴露的。

例如，我们可以使用反射机制获取类的私有属性并强制修改其值，或者调用类的私有方法，这样就可以绕过类的封装性，造成意想不到的结果。

另一方面，虽然反射机制破坏了对象的封装性，但它也为某些场景下的编程提供了极大的便利，例如框架和动态代理等领域都广泛应用反射机制。

因此，在使用反射机制时，需要谨慎使用，确保不会产生意外的副作用。同时，在开发中，还应该注意保持类的封装性，避免将内部细节暴露给外部，防止被恶意利用。
